#!/usr/bin/env python3
import argparse

class ParseFormatter(argparse.RawTextHelpFormatter, argparse.RawDescriptionHelpFormatter):
    """Class to combine argparse Help and Description formatters"""

description="""
Convert UM fieldsfile to netCDF.

Example:
`um2nc [-i] INPUT_FILE`
Converts INPUT_FILE to netCDF and saves the output as INPUT_FILE.nc

`um2nc [-i] INPUT_FILE [-o] OUTPUT_FILE -v`
Converts INPUT_FILE to netCDF and saves the output as OUTPUT_FILE. Verbosity is enabled.

`um2nc [-i] INPUT_FILE [-o] OUTPUT_FILE --format NETCDF3_CLASSIC --simple`
Converts INPUT_FILE to a NETCDF3 CLASSIC netCDF, using "simple" variable names (in the form "fld_s01i123"), and saves the output as OUTPUT_FILE.
"""

usage="""um2nc [-h] [i] INPUT_FILE [[-o] OUTPUT_FILE]
        [--format {NETCDF4,NETCDF4_CLASSIC,NETCDF3_CLASSIC,NETCDF3_64BIT,1,2,3,4}] 
        [-c COMPRESSION] [--64] [-v] [--include INCLUDE_LIST [INCLUDE_LIST ...] | 
        --exclude EXCLUDE_LIST [EXCLUDE_LIST ...]] 
        [--nomask] [--nohist] [--simple] [--hcrit HCRIT]"""
parser = argparse.ArgumentParser(
    prog="um2nc",
    allow_abbrev=False,
    description=description,
    usage=" ".join(usage.split()),
    formatter_class=ParseFormatter,
)
parser.add_argument(
    '-i', '--input',
    dest='infile',
    required=False,
    type=str,
    metavar="INPUT_FILE",
    help="""UM input file path.
Note: Can be also inserted as a positional argument."""
)
parser.add_argument(
    '-o', '--output',
    required=False,
    dest='outfile',
    type=str,
    metavar="OUTPUT_FILE",
    help="""Converted netCDF output file path.
If not provided, the output will be generated by appending '.nc' to the input file.
Note: Can be also inserted as a positional argument."""
)
parser.add_argument(
    '--format', '-f',
    dest='format',
    required=False,
    type=str,
    default='NETCDF4',
    choices=['NETCDF4', 'NETCDF4_CLASSIC', 'NETCDF3_CLASSIC', 'NETCDF3_64BIT', '1','2','3','4'],
    help="Specify netCDF format among 1:'NETCDF4', 2:'NETCDF4_CLASSIC', 3:'NETCDF3_CLASSIC' or"\
            "4:'NETCDF3_64BIT'. Either numbers or strings are accepted. Default 1:'NETCDF4'."
)
parser.add_argument('-c', dest='compression', required=False, type=int,
                    default=4, help='Compression level (0=none, 9=max). Default 4')
parser.add_argument('--64', dest='use64bit', action='store_true',
                    default=False, help='Use 64 bit netcdf for 64 bit input')
parser.add_argument('-v', '--verbose', dest='verbose',
                    action='count', default=0, help='Verbose output (-vv for extra verbose)')
group = parser.add_mutually_exclusive_group()
group.add_argument('--include', dest='include_list', type=int,
                    nargs = '+', help = 'List of stash codes to include')
group.add_argument('--exclude', dest='exclude_list', type=int,
                    nargs = '+', help = 'List of stash codes to exclude')
parser.add_argument('--nomask', dest='nomask', action='store_true',
                    default=False, help="Don't apply heavyside function mask to pressure level fields")
parser.add_argument('--nohist', dest='nohist', action='store_true',
                    default=False, help="Don't update history attribute")
parser.add_argument('--simple', dest='simple', action='store_true',
                    default=False, help="Use simple variable names of form 'fld_s01i123'.")
parser.add_argument('--hcrit', dest='hcrit', type=float,
                    default=0.5, help="Critical value of heavyside function for pressure level masking (default=0.5)")

args,unknown=parser.parse_known_args()
print(args)
print(unknown)