# Copyright 2022 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

"""
Module to define the parser for the `modify` subcommand.

Script created by Davide Marchegiani (davide.marchegiani@anu.edu.au) at ACCESS-NRI.
"""

from typing import List
import argparse
from amami.parsers.core import SubcommandParser
from amami.loggers import LOGGER
from amami.misc_utils import create_unexistent_file

DESCRIPTION="""
Modify UM fieldsfile data using netCDF data, or by applying a user-defined function.

!IMPORTANT WARNING!
Care needs to be taken when modifying UM fieldsfiles.
If you modify a UM fieldsfile to be used in a simulation as a UM ancillary file, you have to make """\
"""sure that it is consistent with the land-sea mask ancillary file used in the same simulation.
Even if the original UM fieldsfile (INPUT) is consistent with such land-sea mask, the modified UM fieldsfile """\
"""(OUTPUT) is not guaranteed to be consistent with it.
For the same reason, if your INPUT is a land-sea mask ancillary file, after producing the OUTPUT, """\
"""you have to make sure that all the ancillary files used in the same simulation are consistent with it.

For more information about UM fieldsfiles, please refer to"""\
""" https://code.metoffice.gov.uk/doc/um/latest/papers/umdp_F03.pdf"""\
""" (MOSRS account needed).

Examples:
`modify -i INPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as INPUT_FILE_modified.

`modify -i INPUT_FILE -o OUTPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as OUTPUT_FILE.

`modify -i INPUT_FILE -o OUTPUT_FILE --ufunc FUNCTION`
Modify the INPUT_FILE data using the user-defined function FUNCTION, and saves the output as OUTPUT_FILE.
"""

USAGE="""
amami modify [-h] -i INPUT_FILE (--nc NETCDF_FILE|--ufunc FUNCTION) [-o OUTPUT_FILE] [--stash STASH_CODES] [-v|-s|--debug] """\
"""[--lat LATITUDE_NAME] [--lon LONGITUDE_NAME] [--t TIME_NAME] [--lev LEVEL_NAME] [--nan NAN_VALUE]
"""

def callback_function(
        known_args: argparse.Namespace,
        unknown_args: List[str]
    ) -> argparse.Namespace:
    """
    Preprocessing for `modify` parser.
    Does the following tasks:
    -   Checks if either netCDF file or user-defined function have been passed as arguments, 
        otherwise raises an error;
    -   Checks if the output path has been provided, otherwise generates it by appending 
        '_modified' to the input file.
    """
    # Checks if any unknown arguments have been passed
    if len(unknown_args) > 0:
        LOGGER.error(f"Too many arguments.\n\nusage: {' '.join(USAGE.split())}")
    # Checks the consistency between --ufunc, --netcdf, --latitude, --longitude, --time and --level arguments
    if (known_args.ncfile is None):
        if (known_args.ufunc is None):
            LOGGER.error(f"Neither netCDF file nor user-defined function provided.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.latitude_name is not None):
            LOGGER.error(f"'--latitude/--lat' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.longitude_name is not None):
            LOGGER.error(f"'--longitude/--lon' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.time_name is not None):
            LOGGER.error(f"'--time' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.level_name is not None):
            LOGGER.error(f"'--level/--lev' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.nanval is not None):
            LOGGER.error(f"'--nan' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
    # Checks if output is provided, otherwise generates it
    if (known_args.outfile is None):
        known_args.outfile = create_unexistent_file(f"{known_args.infile}_modified")
    return known_args

# Create parser
PARSER=SubcommandParser(
    usage=USAGE,
    description=DESCRIPTION,
    callback=callback_function,
)
# Add arguments
PARSER.add_argument(
    '-i', '--input',
    dest='infile',
    required=True,
    type=str,
    metavar="INPUT_FILE",
    help="""Path to the UM fieldsfile to be modified.

"""
)
PARSER.add_argument(
    '-o', '--output',
    required=False,
    dest='outfile',
    type=str,
    metavar="OUTPUT_FILE",
    help="""Path for the modified UM fieldsfile in output.
If not provided, the output will be generated by appending '.nc' to the input file.

"""
)
mutual1 = PARSER.add_mutually_exclusive_group()
mutual1.add_argument(
    '--nc', '--netcdf',
    dest='ncfile',
    required=False,
    type=str,
    metavar="NETCDF_FILE",
    help="""Path to the netCDF file to modify the UM fieldsfile data.

"""
)
mutual1.add_argument(
    '--ufunc',
    dest='ufunc',
    required=False,
    type=str,
    metavar="FUNCTION",
    help="""User-defined function to modify the UM fieldsfile data.
The function should be defined as a Python lambda function """\
"""("https://www.w3schools.com/python/python_lambda.asp").
The function is applied element-wise to all data points of all variables in the UM fieldsfile.

Examples:
`--ufunc "lambda x: x*0.9"`
Scale all data values by 0.9.

`--ufunc "lambda x: x+1 if x>=0 else x-1"`
Add 1 to all data values greater than equal 0 and subtract 1 to all data values less than 0.

"""
)

PARSER.add_argument(
    '--stash', '--var', '--variables',
    required=False,
    dest='stash_codes',
    type=str,
    metavar="STASH_CODES",
    help="""Space-separated list of STASH codes (as per UK Met Office Stash Registry """\
"""https://reference.metoffice.gov.uk/um/stash) to change in the UM fieldsfile.
If a netCDF file is provided for the modification:
  - This list should be ordered according to the order of appearance of the correspondent netCDF variables.
  - The length of this list must be equal to the number of variables in the netCDF file.
  So, the first variable listed will be modified with the first netCDF """\
"""variable, the second with the second, and so on.
Any UM variable having a STASH code not present in this list will be left unchanged.
If not provided, all variables in the UM file will be modified.

Examples:
`--nc ncfile --stash 2`
The UM variable with STASH code 2 (m01s00i002) will be modified """
"""using the first (and only) netCDF variable. 

`--nc ncfile --stash "1418 m01s03i209 1417"`
The UM variables with STASH codes 1418 (m01s01i418), 3209 (m01s03i209) and 1417 (m01s01i417) will be modified """
"""using the first, second and third netCDF variables, respectively. 

`--nc ncfile`
The first UM variable will be modified using the first netCDF variable, """\
"""the second UM variable using the second netCDF variable, and so on for """\
"""all UM variables in the file.

`--ufunc "lambda x: x+1" --stash "m01s01i004 33"`
The UM variables with STASH codes 1004 (m01s01i004) and 33 (m01s00i033) will be modified """
"""using the lambda function 'lambda x: x+1'. 

"""
)
PARSER.add_argument(
    '--lat', '--latitude',
    required=False,
    dest='latitude_name',
    type=str,
    metavar="LATITUDE_NAME",
    help="""Name of the latitude dimension of the netCDF variable(s).
If the netCDF variables have different latitude dimension names, space-separated list of the latitude """\
"""dimension names, in the same order of appearance as the correspondent netCDF variables.
If not provided, the following names will be used to try and match the netCDF variables latitude """\
"""dimension names (in this order): "latitude", "lat". If none of them are found in the netCDF, """\
"""an error will be thrown.
In the case of UM fieldsfile data without latitude dimension (one single latitude), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--lat "lat_0"`
All netCDF variables have latitude dimension named 'lat_0'.

`--lat "lat_0 latitude latitude_0"`
The netCDF has 3 variables with latitude dimensions named "lat_0", "latitude" """\
"""and "latitude_0", respectively.

"""
)
PARSER.add_argument(
    '--lon', '--longitude',
    required=False,
    dest='longitude_name',
    type=str,
    metavar="LONGITUDE_NAME",
    help="""Name of the longitude dimension of the netCDF variable(s).
If the netCDF variables have different longitude dimension names, space-separated list of the longitude """\
"""dimension names, in the same order of appearance as the correspondent netCDF variables.
If not provided, the following names will be used to try and match the netCDF variables longitude """\
"""dimension names (in this order): "longitude", "lon". If none of them are found in the netCDF, """\
"""an error will be thrown.
In the case of UM fieldsfile data without longitude dimension (one single longitude), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--lon "lon_0"`
All netCDF variables have longitude dimension named 'lon_0'.

`--lon "lon_0 longitude longitude_0"`
The netCDF has 3 variables with longitude dimensions named "lon_0", "longitude" """\
"""and "longitude_0", respectively.

"""
)
PARSER.add_argument(
    '--t', '--time',
    required=False,
    dest='time_name',
    type=str,
    metavar="TIME_NAME",
    help="""Name of the time dimension of the netCDF variable(s).
If the netCDF variables have different time dimension names, space-separated list of the time """\
"""dimension names, in the same order of appearance as the correspondent netCDF variables.
If not provided, the following names will be used to try and match the netCDF variables time """\
"""dimension names (in this order): "time", "t". If none of them are found in the netCDF, """\
"""an error will be thrown.
In the case of UM fieldsfile data without time dimension (one single time), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--t "t_0"`
All netCDF variables have time dimension named 't_0'.

`--t "t_0 time time_0"`
The netCDF has 3 variables with time dimensions named "t_0", "time" """\
"""and "time_0", respectively.

"""
)
PARSER.add_argument(
    '--lev', '--level',
    required=False,
    dest='level_name',
    type=str,
    metavar="LEVEL_NAME",
    help="""Name of the level dimension of the netCDF variable(s).
If the netCDF variables have different level dimension names, space-separated list of the level """\
"""dimension names, in the same order of appearance as the correspondent netCDF variables.
If not provided, the following names will be used to try and match the netCDF variables level """\
"""dimension names (in this order): "level", "lev". If none of them are found in the netCDF, """\
"""an error will be thrown.
In the case of UM fieldsfile data without level dimension (one single level), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--lev "lev_0"`
All netCDF variables have level dimension named 'lev_0'.

`--lev "lev_0 level level_0"`
The netCDF has 3 variables with level dimensions named "lev_0", "level" """\
"""and "level_0", respectively.

"""
)
PARSER.add_argument(
    '--nan',
    required=False,
    dest='nanval',
    type=float,
    metavar="NANVAL",
    help="""Value in the netCDF data to be treated as NaN for the purpose of the modification.
Any NaN in the netCDF data will also be treated as NaN for the purpose of the modification.
Cannot be used together with '--ufunc'.

Examples:
`--nan 99999`
All netCDF values equal to 99999 will be substituted with NaN for the purpose of the modification.

"""
)