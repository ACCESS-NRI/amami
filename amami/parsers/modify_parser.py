# Copyright 2022 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

"""
Module to define the parser for the `modify` subcommand.

Script created by Davide Marchegiani (davide.marchegiani@anu.edu.au) at ACCESS-NRI.
"""

from typing import List
import argparse
from amami.parsers.core import SubcommandParser
from amami.loggers import LOGGER

DESCRIPTION="""
Modify UM fieldsfile data using netCDF data, or by applying a user-defined
function.

!IMPORTANT WARNING!
Care needs to be taken when modifying UM fieldsfiles.
If you modify a UM fieldsfile (INPUT_FILE) and produce a UM fieldsfile (OUTPUT_FILE) to be used in a simulation """\
"""as a UM ancillary file, you have to make sure that this OUTPUT_FILE is consistent with the land-sea """\
"""mask ancillary file used in the same simulation.
Even if the INPUT_FILE is consistent with such land-sea mask, the OUTPUT_FILE is not guaranteed """\
"""to be consistent with it.
For the same reason, if your INPUT_FILE is a land-sea mask ancillary file, after producing the OUTPUT_FILE """\
"""you will have to check that all the other ancillary files are consistent with it.

For more information about UM fieldsfiles, please refer to"""\
""" https://code.metoffice.gov.uk/doc/um/latest/papers/umdp_F03.pdf"""\
""" (MOSRS account needed).

Examples:
`modify -i INPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as INPUT_FILE_modified.

`modify -i INPUT_FILE -o OUTPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as OUTPUT_FILE.

`modify -i INPUT_FILE -o OUTPUT_FILE --ufunc FUNCTION`
Modify the INPUT_FILE data using the user-defined function FUNCTION, and saves the output as OUTPUT_FILE.
"""

USAGE="""
amami modify [-h] -i INPUT_FILE (--nc NETCDF_FILE|--ufunc FUNCTION) [-o OUTPUT_FILE] [--var VARIABLES] [-v|-s|--debug] """\
"""[--lat LATITUDE_NAME] [--lon LONGITUDE_NAME] [--t TIME_NAME] [--lev LEVEL_NAME] [--nan NAN_VALUE]
"""

def check_netcdf_or_ufunc(
        known_args: argparse.Namespace,
        unknown_args: List[str]
    ) -> argparse.Namespace:
    """
    Preprocessing for `modify` parser.
    Checks if either netCDF file or user-defined function have been passed as arguments, otherwise raises
    an error.
    """
    if len(unknown_args) > 0:
        LOGGER.error(f"Too many arguments.\n\nusage: {' '.join(USAGE.split())}")
    elif (known_args.ncfile is None):
        if (known_args.ufunc is None):
            LOGGER.error(f"Neither netCDF file nor user-defined function provided.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.latitude_name is not None):
            LOGGER.error(f"'--latitude/--lat' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.longitude_name is not None):
            LOGGER.error(f"'--longitude/--lon' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.time_name is not None):
            LOGGER.error(f"'--time' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
        elif (known_args.level_name is not None):
            LOGGER.error(f"'--level/--lev' argument cannot be used together with '--ufunc'.\n\nusage: {' '.join(USAGE.split())}")
    return known_args

# Create parser
PARSER=SubcommandParser(
    usage=USAGE,
    description=DESCRIPTION,
    callback=check_netcdf_or_ufunc,
)
# Add arguments
PARSER.add_argument(
    '-i', '--input',
    dest='infile',
    required=True,
    type=str,
    metavar="INPUT_FILE",
    help="""Path to the UM fieldsfile to be modified.

"""
)
PARSER.add_argument(
    '-o', '--output',
    required=False,
    dest='outfile',
    type=str,
    metavar="OUTPUT_FILE",
    help="""Path for the modified UM fieldsfile in output.
If not provided, the output will be generated by appending '.nc' to the input file.

"""
)
mutual1 = PARSER.add_mutually_exclusive_group()
mutual1.add_argument(
    '--nc', '--netCDF',
    dest='ncfile',
    required=False,
    type=str,
    metavar="NETCDF_FILE",
    help="""Path to the netCDF file to modify the UM fieldsfile data.

"""
)
mutual1.add_argument(
    '--ufunc',
    dest='ufunc',
    required=False,
    type=str,
    metavar="FUNCTION",
    help="""User-defined function to modify the UM fieldsfile data.
The function should be defined as a Python lambda function """\
"""("https://www.w3schools.com/python/python_lambda.asp").
The function is applied element-wise to all data points of all variables in the UM fieldsfile.

Examples:
`--ufunc "lambda x: x*0.9"`
Scale all data values by 0.9.

`--ufunc "lambda x: x+1 if x>=0 else x-1"`
Add 1 to all data values greater than equal 0 and subtract 1 to all data values less than 0.

"""
)

PARSER.add_argument(
    '--var', '--variables',
    required=False,
    dest='variables',
    type=str,
    metavar="VARIABLES",
    help="""Space-separated list of STASH codes (as per UK Met Office Stash Registry """\
"""https://reference.metoffice.gov.uk/um/stash) to change in the UM file.
If a netCDF file is used for the modification:
  - This list should be ordered according to the correspondent netCDF variables.
  - The length of this list must be equal to the number of variables in the netCDF file.
  So, the first variable listed will be modified with the first netCDF """\
"""variable, the second with the second, and so on.
Any UM variable not listed here will be left unchanged.
If not provided, all variables in the UM file will be modified.
Cannot be used together with '--ufunc'.

Examples:
`--nc ncfile --var 2`
The UM variable with STASH code 2 will be modified """
"""using the first (and only) netCDF variable. 

`--nc ncfile --var "2 m01s01i004 33`
The UM variables with STASH codes 2, 1004 (m01s01i004) and 33 will be modified """
"""using the first, second and third netCDF variables, respectively. 

`--nc ncfile`
The first UM variable will be modified using the first netCDF variable, """\
"""the second UM variable using the second netCDF variable, and so on for """\
"""all UM variables in the file.

"""
)
PARSER.add_argument(
    '--lat', '--latitude',
    required=False,
    dest='latitude_name',
    type=str,
    metavar="LATITUDE_NAME",
    help="""Name of the latitude dimension in the netCDF variable(s) used to modify the UM fieldsfile data.
If the variables used have different latitude dimension names, space-separated list of the latitude """\
"""dimension names for the used netCDF variables. 
The list should follow the same variable order specified in the '--variables/--var' argument. 
If no '--variables/--var' argument has been selected, the list will follow the default netCDF variable order.
If not provided, the following latitude names will be tried (in this order): "latitude", "lat". 
If none of these are found in the netCDF, an error will be thrown.
In the case of UM fieldsfile data without latitude dimension (one single latitude), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--lat "lat_0"`
All netCDF variables used for the modification have latitude dimension named 'lat_0'.

`--lat "lat_0 latitude latitude_0"`
The three netCDF variables used for the modification have latitude dimension named "lat_0", "latitude" """\
"""and "latitude_0", respectively.

"""
)
PARSER.add_argument(
    '--lon', '--longitude',
    required=False,
    dest='longitude_name',
    type=str,
    metavar="LONGITUDE_NAME",
    help="""Name of the longitude dimension in the netCDF variable(s) used to modify the UM fieldsfile data.
If the variables used have different longitude dimension names, space-separated list of the longitude """\
"""dimension names for the used netCDF variables. 
The list should follow the same variable order specified in the '--variables/--var' argument.
If no '--variables/--var' argument has been selected, the list will follow the default netCDF variable order.
If not provided, the following longitude names will be tried (in this order): "longitude", "lon". 
If none of these are found in the netCDF, an error will be thrown.
In the case of UM fieldsfile data without longitude dimension (one single longitude), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--lon "lon_0"`
All netCDF variables used for the modification have longitude dimension named 'lon_0'.

`--lon "lon_0 longitude longitude_0"`
The three netCDF variables used for the modification have longitude dimension named "lat_0", "longitude" """\
"""and "longitude_0", respectively.

"""
)
PARSER.add_argument(
    '--time',
    required=False,
    dest='time_name',
    type=str,
    metavar="TIME_NAME",
    help="""Name of the time dimension in the netCDF variable(s) used to modify the UM fieldsfile data.
If the variables used have different time dimension names, space-separated list of the time """\
"""dimension names for the used netCDF variables. 
The list should follow the same variable order specified in the '--variables/--var' argument.
If no '--variables/--var' argument has been selected, the list will follow the default netCDF variable order.
If not provided, the following time names will be tried (in this order): "time", "t". 
If none of these are found in the netCDF, an error will be thrown.
In the case of UM fieldsfile data without time dimension (one single time), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--time "time_0"`
All netCDF variables used for the modification have time dimension named 'time_0'.

`--time "t_0 time time_0"`
The three netCDF variables used for the modification have time dimension named "t_0", "time" """\
"""and "time_0", respectively.

"""
)
PARSER.add_argument(
    '--level', '--lev',
    required=False,
    dest='level_name',
    type=str,
    metavar="LEVEL_NAME",
    help="""Name of the level dimension in netCDF variable(s) used to modify the UM fieldsfile data.
If the variables used have different level dimension names, space-separated list of the level """\
"""dimension names for the used netCDF variables. 
The list should follow the same variable order specified in the '--variables/--var' argument.
If no '--variables/--var' argument has been selected, the list will follow the default netCDF variable order.
If not provided, the following level names will be tried (in this order): "level", "lev". 
If none of these are found in the netCDF, an error will be thrown.
In the case of UM fieldsfile data without level dimension (one single level), this argument will not be taken into account.
Cannot be used together with '--ufunc'.

Examples:
`--level "level_0"`
All netCDF variables used for the modification have level dimension named 'level_0'.

`--level "t_0 level level_0"`
The three netCDF variables used for the modification have level dimension named "t_0", "level" """\
"""and "level_0", respectively.

"""
)
PARSER.add_argument(
    '--nan',
    required=False,
    dest='nanval',
    type=str,
    metavar="NANVAL",
    help="""Value in the netCDF data to be treated as NaN for the purpose of the modification.
Any NaN in the netCDF data will also be treated as NaN for the purpose of the modification.

"""
)