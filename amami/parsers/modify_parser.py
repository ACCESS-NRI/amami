# Copyright 2022 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

"""
Module to define the parser for the `modify` subcommand.

Script created by Davide Marchegiani (davide.marchegiani@anu.edu.au) at ACCESS-NRI.
"""

from typing import List
import argparse
from amami.parsers.core import SubcommandParser
from amami.loggers import LOGGER

DESCRIPTION="""
Modify UM fieldsfile data using netCDF data, or by applying a user-defined
function.

!IMPORTANT WARNING!
Care needs to be taken when modifying UM fieldsfiles.
If you modify a UM fieldsfile (INPUT_FILE) and produce a UM fieldsfile (OUTPUT_FILE) to be used in a simulation """\
"""as a UM ancillary file, you have to make sure that this OUTPUT_FILE is consistent with the land-sea """\
"""mask ancillary file used in the same simulation.
Even if the INPUT_FILE is consistent with such land-sea mask, the OUTPUT_FILE is not guaranteed """\
"""to be consistent with it.
For the same reason, if your INPUT_FILE is a land-sea mask ancillary file, after producing the OUTPUT_FILE """\
"""you will have to check that all the other ancillary files are consistent with it.

For more information about UM fieldsfiles, please refer to"""\
""" https://code.metoffice.gov.uk/doc/um/latest/papers/umdp_F03.pdf"""\
""" (MOSRS account needed).

Examples:
`modify -i INPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as INPUT_FILE_modified.

`modify -i INPUT_FILE -o OUTPUT_FILE --nc NETCDF_FILE`
Modify the INPUT_FILE data using the NETCDF_FILE data, and saves the output as OUTPUT_FILE.

`modify -i INPUT_FILE -o OUTPUT_FILE --ufunc FUNCTION`
Modify the INPUT_FILE data using the user-defined function FUNCTION, and saves the output as OUTPUT_FILE.
"""

USAGE="""
amami modify [-h] -i INPUT_FILE (--nc NETCDF_FILE|--ufunc FUNCTION) [-o OUTPUT_FILE] [-v|-s|--debug] """\
"""[--lat LATITUDE_NAME] [--lon LONGITUDE_NAME] [--t TIME_NAME] [--lev LEVEL_NAME] [--nan NAN_VALUE]
"""

def check_netcdf_or_ufunc(
        known_args: argparse.Namespace,
        unknown_args: List[str]
    ) -> argparse.Namespace:
    """
    Preprocessing for `modify` parser.
    Checks if either netCDF file or user-defined function have been passed as arguments, otherwise raises
    an error.
    """
    if len(unknown_args) > 0:
        LOGGER.error(f"Too many arguments.\n\nusage: {' '.join(USAGE.split())}")
    elif (known_args.ncfile is None) and (known_args.ufunc is None):
        LOGGER.error(f"Neither netCDF file nor user-defined function provided.\n\nusage: {' '.join(USAGE.split())}")
    return known_args

# Create parser
PARSER=SubcommandParser(
    usage=USAGE,
    description=DESCRIPTION,
    callback=check_netcdf_or_ufunc,
)
# Add arguments
PARSER.add_argument(
    '-i', '--input',
    dest='infile',
    required=True,
    type=str,
    metavar="INPUT_FILE",
    help="""Path to the UM fieldsfile to be modified.

"""
)
PARSER.add_argument(
    '-o', '--output',
    required=False,
    dest='outfile',
    type=str,
    metavar="OUTPUT_FILE",
    help="""Path for the modified UM fieldsfile in output.
If not provided, the output will be generated by appending '.nc' to the input file.

"""
)
mutual1 = PARSER.add_mutually_exclusive_group()
mutual1.add_argument(
    '--nc', '--netCDF',
    dest='ncfile',
    required=False,
    type=str,
    metavar="NETCDF_FILE",
    help="""Path to the netCDF file to modify the UM fieldsfile data.

"""
)
mutual1.add_argument(
    '--ufunc',
    dest='ufunc',
    required=False,
    type=str,
    metavar="FUNCTION",
    help="""User-defined function to modify the UM fieldsfile data.
The function should be defined as a Python lambda function """\
"""("https://www.w3schools.com/python/python_lambda.asp").
The function is applied element-wise to all data points of all variables in the UM fieldsfile.

Examples:
`--ufunc "lambda x: x*0.9"`
Scale all data values by 0.9.

`--ufunc "lambda x: x+1 if x>=0 else x-1"`
Add 1 to all data values greater than equal 0 and subtract 1 to all data values less than 0.

"""
)
