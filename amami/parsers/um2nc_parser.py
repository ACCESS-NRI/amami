# Copyright 2022 ACCESS-NRI and contributors. See the top-level COPYRIGHT file for details.
# SPDX-License-Identifier: Apache-2.0

# Script created by Davide Marchegiani (davide.marchegiani@anu.edu.au) at ACCESS-NRI.

"""Module to define the parser for the `um2nc` subcommand."""

from typing import List
import argparse
from amami.parsers.core import SubcommandParser

DESCRIPTION="""
Convert UM fieldsfile to netCDF.
For more information about UM fieldsfiles, please refer to"""\
""" https://code.metoffice.gov.uk/doc/um/latest/papers/umdp_F03.pdf"""\
""" (MOSRS account needed).

Example:
`um2nc [-i] INPUT_FILE`
Converts INPUT_FILE to netCDF and saves the output as INPUT_FILE.nc

`um2nc [-i] INPUT_FILE [-o] OUTPUT_FILE -v`
Converts INPUT_FILE to netCDF and saves the output as OUTPUT_FILE. Verbosity is enabled.

`um2nc [-i] INPUT_FILE [-o] OUTPUT_FILE --format NETCDF3_CLASSIC --simple`
Converts INPUT_FILE to a NETCDF3 CLASSIC netCDF, using "simple" variable names"""\
""" (in the form "fld_s01i123"), and saves the output as OUTPUT_FILE.
"""

USAGE="""
amami um2nc [-h] [i] INPUT_FILE [[-o] OUTPUT_FILE] [-v]
[--format {NETCDF4,NETCDF4_CLASSIC,NETCDF3_CLASSIC,NETCDF3_64BIT,1,2,3,4}] 
[-c COMPRESSION] [--64] [--nomask] [--nohist] [--simple] [--hcrit HCRIT]
[--include INCLUDE_LIST [INCLUDE_LIST ...] | --exclude EXCLUDE_LIST [EXCLUDE_LIST ...]] 
"""

def preprocess(
        known_args: argparse.Namespace,
        unknown_args: List[str]
    ) -> argparse.Namespace:
    """
    Preprocessing for `um2nc` parser.
    Checks optional and positional parameters to understand input and output, 
    and set default output if not provided.
    """

    # Convert known_args to dict to be able to modify them
    args = vars(known_args)
    # Check optional and positional parameters to determine input and output paths.
    if (
        len(unknown_args) > 2
        ) or (
        (None not in [args['infile'],args['outfile']]) and (len(unknown_args) > 0)
        ) or (
        ((args['infile'] is None) ^ (args['infile'] is None)) and (len(unknown_args) > 1)
        ):
        print("Too many arguments.")
    elif (
        (args['infile'] is None) and (len(unknown_args) == 0)
        ):
        print("No input file provided.")
    elif args['infile'] is None:
        args['infile'] = unknown_args[0]
        if args['outfile'] is None:
            if len(unknown_args) == 2:
                args['outfile'] = unknown_args[1]
            else:
                args['outfile'] = f"{args['infile']}.nc"
    elif args['outfile'] is None:
        if len(unknown_args) == 1:
            args['outfile'] = unknown_args[0]
        else:
            args['outfile'] = f"{args['infile']}.nc"
    return argparse.Namespace(**args)

# Create parser
PARSER=SubcommandParser(
    usage=USAGE,
    description=DESCRIPTION,
    preprocess_fun=preprocess,
)
# Add arguments
PARSER.add_argument(
    '-i', '--input',
    dest='infile',
    required=False,
    type=str,
    metavar="INPUT_FILE",
    help="""UM input file path.
Note: Can be also inserted as a positional argument."""
)
PARSER.add_argument(
    '-o', '--output',
    required=False,
    dest='outfile',
    type=str,
    metavar="OUTPUT_FILE",
    help="""Converted netCDF output file path.
If not provided, the output will be generated by appending '.nc' to the input file.
Note: Can be also inserted as a positional argument."""
)
PARSER.add_argument(
    '-f', '--format',
    dest='format',
    required=False,
    type=str,
    default='NETCDF4',
    choices=['NETCDF4', 'NETCDF4_CLASSIC', 'NETCDF3_CLASSIC', 'NETCDF3_64BIT', '1','2','3','4'],
    help="""Specify netCDF format among 1 ('NETCDF4'), 2 ('NETCDF4_CLASSIC'),"""\
""" 3 ('NETCDF3_CLASSIC') or 4 ('NETCDF3_64BIT').
Either numbers or strings are accepted. 
Default: 1 ('NETCDF4')."""
)
PARSER.add_argument(
    '-c', '--compression',
    dest='compression',
    required=False,
    type=int,
    default=4,
    help="""Compression level (0=none, 9=max).
Default 4."""
)
PARSER.add_argument(
    '--64bit', '--64',
    dest='use64bit',
    action='store_true',
    help='Use 64 bit netCDF for 64 bit input.'
)
PARSER.add_argument(
    '--nomask',
    dest='nomask',
    action='store_true',
    help="Don't apply heavyside function mask to pressure level fields."
)
PARSER.add_argument(
    '--nohist',
    dest='nohist',
    action='store_true',
    help="Don't update history attribute."
)
PARSER.add_argument(
    '--simple',
    dest='simple',
    action='store_true',
    help="Use 'simple' variable names of form 'fld_s01i123'."
)
PARSER.add_argument(
    '--hcrit',
    dest='hcrit',
    type=float,
    default=0.5,
    help="""Critical value of heavyside function for pressure level masking.
Default: 0.5."""
)
mutual = PARSER.add_mutually_exclusive_group()
mutual.add_argument(
    '--include',
    dest='include_list',
    type=int,
    nargs = '+',
    help = """List of stash codes to include in the netCDF conversion.
Only the variables with the included stash codes will be converted.
Cannot be used together with '--exclude'."""
)
mutual.add_argument(
    '--exclude',
    dest='exclude_list',
    type=int,
    nargs = '+',
    help = """List of stash codes to exclude from the netCDF conversion.
The variables with the excluded stash codes will not be converted.
Cannot be used together with '--include'."""
)
